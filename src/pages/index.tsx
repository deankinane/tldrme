import { type NextPage } from 'next'
import Head from 'next/head'
import {
	ClientSafeProvider,
	getProviders,
	LiteralUnion,
	signIn,
	signOut,
	useSession,
} from 'next-auth/react'
import React, { useCallback } from 'react'
import { BuiltInProviderType } from 'next-auth/providers'
import { Button } from '@/modules/common/button/button'
import { UserWidget } from '@/modules/common/user-widget/user-widget'
import { LinkButton } from '@/modules/common/link-button/link-button'
interface Props {
	providers: Record<
		LiteralUnion<BuiltInProviderType, string>,
		ClientSafeProvider
	>
}
const Home: NextPage<Props> = ({ providers }) => {
	const { data: session, status } = useSession()

	const onLoginClick = useCallback(() => {
		signIn()
	}, [])
	return (
		<>
			<Head>
				<title>tldrMe - You, succinctly</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"
				></meta>
			</Head>
			<main className="h-full ">
				<UserWidget className="fixed top-10 right-10" />
				<div className="m-auto flex h-full w-full flex-col items-center justify-center px-20 lg:w-2/6 lg:px-0">
					<h1 className="mb-10 text-5xl font-bold text-white lg:text-7xl">
						tldrMe
					</h1>
					<h2 className="text-xl font-semibold text-white lg:text-3xl">
						You, succinctly.
					</h2>
					{status === 'authenticated' ? (
						<LinkButton className="mt-32" href="/editor">
							Edit Your Resume
						</LinkButton>
					) : (
						<Button className="mt-32" onClick={onLoginClick}>
							Create Your Resume
						</Button>
					)}
					{/* {Object.values(providers).map((provider) => ( */}
					{/* 	<div key={provider.name}> */}
					{/* 		<Button onClick={() => signIn(provider.id)}> */}
					{/* 			Sign in with {provider.name} */}
					{/* 		</Button> */}
					{/* 	</div> */}
					{/* ))} */}
				</div>
			</main>
		</>
	)
}

export default Home

export async function getServerSideProps() {
	const providers = await getProviders()
	return {
		props: { providers },
	}
}

// const AuthShowcase: React.FC = () => {
// 	const { data: sessionData } = useSession()

// 	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
// 		undefined, // no input
// 		{ enabled: sessionData?.user !== undefined }
// 	)

// 	return (
// 		<div className="flex flex-col items-center justify-center gap-4">
// 			<p className="text-center text-2xl text-white">
// 				{sessionData && (
// 					<span>Logged in as {sessionData.user?.name}</span>
// 				)}
// 				{secretMessage && <span> - {secretMessage}</span>}
// 			</p>
// 			<button
// 				className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
// 				onClick={sessionData ? () => signOut() : () => signIn()}
// 			>
// 				{sessionData ? 'Sign out' : 'Sign in'}
// 			</button>
// 		</div>
// 	)
// }
